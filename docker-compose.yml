version: '3.8'

services:

  kafka1:
    image: confluentinc/cp-kafka:7.9.1
    container_name: kafka1
    hostname: kafka1
    ports:
      - 9092:9092
#      - 9997:9997   # JMX
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: INTERNAL://kafka1:29092,CONTROLLER://kafka1:9093,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: /kafka/kraft-combined-logs
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka1
#      KAFKA_JMX_ENABLED: "false"
#      KAFKA_OPTS: >
#        -Dcom.sun.management.jmxremote
#        -Dcom.sun.management.jmxremote.authenticate=false
#        -Dcom.sun.management.jmxremote.ssl=false
#        -Dcom.sun.management.jmxremote.port=9997
#        -Dcom.sun.management.jmxremote.rmi.port=9997
#        -Djava.rmi.server.hostname=kafka1
    healthcheck:
      test: [
        "CMD-SHELL",
        "kafka-topics --bootstrap-server localhost:9092 --list | grep -q '^$' || exit 0"
      ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s
    user: root
    volumes:
      - ./kafka1-data:/kafka/kraft-combined-logs
    networks:
      - kraft-net

  kafka2:
    image: confluentinc/cp-kafka:7.9.1
    container_name: kafka2
    hostname: kafka2
    ports:
      - 9094:9094
#      - 9998:9998
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: INTERNAL://kafka2:29094,CONTROLLER://kafka2:9093,EXTERNAL://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:29094,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: /kafka/kraft-combined-logs
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka2
#      KAFKA_JMX_ENABLED: "false"
#      KAFKA_OPTS: >
#        -Dcom.sun.management.jmxremote
#        -Dcom.sun.management.jmxremote.authenticate=false
#        -Dcom.sun.management.jmxremote.ssl=false
#        -Dcom.sun.management.jmxremote.port=9998
#        -Dcom.sun.management.jmxremote.rmi.port=9998
#        -Djava.rmi.server.hostname=kafka2
    healthcheck:
      test: [
        "CMD-SHELL",
        "kafka-topics --bootstrap-server localhost:9094 --list | grep -q '^$' || exit 0"
      ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s
    user: root
    volumes:
      - ./kafka2-data:/kafka/kraft-combined-logs
    networks:
      - kraft-net

  kafka3:
    image: confluentinc/cp-kafka:7.9.1
    container_name: kafka3
    hostname: kafka3
    ports:
      - 9096:9096
#      - 9999:9999
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: INTERNAL://kafka3:29096,CONTROLLER://kafka3:9093,EXTERNAL://0.0.0.0:9096
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:29096,EXTERNAL://localhost:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: /kafka/kraft-combined-logs
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka3
#      KAFKA_JMX_ENABLED: "false"
#      KAFKA_OPTS: >
#        -Dcom.sun.management.jmxremote
#        -Dcom.sun.management.jmxremote.authenticate=false
#        -Dcom.sun.management.jmxremote.ssl=false
#        -Dcom.sun.management.jmxremote.port=9999
#        -Dcom.sun.management.jmxremote.rmi.port=9999
#        -Djava.rmi.server.hostname=kafka3
    healthcheck:
      test: [
        "CMD-SHELL",
        "kafka-topics --bootstrap-server localhost:9096 --list | grep -q '^$' || exit 0"
      ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s
    user: root
    volumes:
      - ./kafka3-data:/kafka/kraft-combined-logs
    networks:
      - kraft-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: kraft-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29094,kafka3:29096
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
#      KAFKA_CLUSTERS_0_JMX_URL: |
#        kafka1=service:jmx:rmi:///jndi/rmi://kafka1:9997/jmxrmi
#        kafka2=service:jmx:rmi:///jndi/rmi://kafka2:9998/jmxrmi
#        kafka3=service:jmx:rmi:///jndi/rmi://kafka3:9999/jmxrmi
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kraft-net

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: producer
    ports:
      - "8180:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: kafka1:29092,kafka2:29094,kafka3:29096
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - kraft-net

  watchdog:
    image: docker:24.0-cli  # âœ… CLI-only image with docker pre-installed
    container_name: watchdog
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Give access to Docker API
      - ./watchdog.sh:/watchdog.sh  # Mounts script correctly
    entrypoint: [ "sh", "/watchdog.sh" ]
    working_dir: /
    command: [ "sh", "/watchdog.sh" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"

networks:
  kraft-net:
    driver: bridge

volumes:
  kafka1-data:
  kafka2-data:
  kafka3-data:
